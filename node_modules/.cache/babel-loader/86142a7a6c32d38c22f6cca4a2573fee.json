{"ast":null,"code":"var _jsxFileName = \"/Users/lenaduong/Desktop/MERN Project/frontend/src/components/Card.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef } from 'react';\nimport { useDrag, useDrop } from 'react-dnd';\nimport { ItemTypes } from './ItemTypes.js';\nimport \"./Favorites.css\";\nimport favorites from '../services/favorites.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move'\n};\nexport const Card = _ref => {\n  _s();\n\n  let {\n    id,\n    text,\n    poster,\n    index,\n    moveCard\n  } = _ref;\n  const ref = useRef(null);\n  const [{\n    handlerId\n  }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId()\n      };\n    },\n\n    hover(item, monitor) {\n      var _ref$current;\n\n      if (!ref.current) {\n        return;\n      }\n\n      const dragIndex = item.index;\n      const hoverIndex = index; // Don't replace items with themselves\n\n      if (dragIndex === hoverIndex) {\n        return;\n      } // Determine rectangle on screen\n\n\n      const hoverBoundingRect = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.getBoundingClientRect(); // Get vertical middle\n\n      const hoverMiddleY = (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2; // Determine mouse position\n\n      const clientOffset = monitor.getClientOffset(); // Get pixels to the top\n\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top; // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return;\n      } // Dragging upwards\n\n\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return;\n      } // Time to actually perform the action\n\n\n      moveCard(dragIndex, hoverIndex); // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n\n      item.index = hoverIndex;\n    }\n\n  });\n  const [{\n    isDragging\n  }, drag] = useDrag({\n    type: ItemTypes.CARD,\n    item: () => {\n      return {\n        id,\n        index\n      };\n    },\n    collect: monitor => ({\n      isDragging: monitor.isDragging()\n    })\n  });\n  const opacity = isDragging ? 0 : 1;\n  drag(drop(ref));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    ref: ref,\n    class: \"favortiesCard\",\n    \"data-handler-id\": handlerId,\n    children: text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Card, \"Bm9lse0dSUrMRW3+tCDIsw+uDQ8=\", false, function () {\n  return [useDrop, useDrag];\n});\n\n_c = Card;\n\nvar _c;\n\n$RefreshReg$(_c, \"Card\");","map":{"version":3,"names":["React","useRef","useDrag","useDrop","ItemTypes","favorites","style","border","padding","marginBottom","backgroundColor","cursor","Card","id","text","poster","index","moveCard","ref","handlerId","drop","accept","CARD","collect","monitor","getHandlerId","hover","item","current","dragIndex","hoverIndex","hoverBoundingRect","getBoundingClientRect","hoverMiddleY","bottom","top","clientOffset","getClientOffset","hoverClientY","y","isDragging","drag","type","opacity"],"sources":["/Users/lenaduong/Desktop/MERN Project/frontend/src/components/Card.js"],"sourcesContent":["import React, { useRef } from 'react'\nimport { useDrag, useDrop } from 'react-dnd'\nimport { ItemTypes } from './ItemTypes.js'\nimport \"./Favorites.css\";\nimport favorites from '../services/favorites.js';\n\nconst style = {\n  border: '1px dashed gray',\n  padding: '0.5rem 1rem',\n  marginBottom: '.5rem',\n  backgroundColor: 'white',\n  cursor: 'move',\n}\nexport const Card = ({ id, text, poster, index, moveCard }) => {\n  const ref = useRef(null)\n  const [{ handlerId }, drop] = useDrop({\n    accept: ItemTypes.CARD,\n    collect(monitor) {\n      return {\n        handlerId: monitor.getHandlerId(),\n      }\n    },\n    hover(item, monitor) {\n      if (!ref.current) {\n        return\n      }\n      const dragIndex = item.index\n      const hoverIndex = index\n      // Don't replace items with themselves\n      if (dragIndex === hoverIndex) {\n        return\n      }\n      // Determine rectangle on screen\n      const hoverBoundingRect = ref.current?.getBoundingClientRect()\n      // Get vertical middle\n      const hoverMiddleY =\n        (hoverBoundingRect.bottom - hoverBoundingRect.top) / 2\n      // Determine mouse position\n      const clientOffset = monitor.getClientOffset()\n      // Get pixels to the top\n      const hoverClientY = clientOffset.y - hoverBoundingRect.top\n      // Only perform the move when the mouse has crossed half of the items height\n      // When dragging downwards, only move when the cursor is below 50%\n      // When dragging upwards, only move when the cursor is above 50%\n      // Dragging downwards\n      if (dragIndex < hoverIndex && hoverClientY < hoverMiddleY) {\n        return\n      }\n      // Dragging upwards\n      if (dragIndex > hoverIndex && hoverClientY > hoverMiddleY) {\n        return\n      }\n      // Time to actually perform the action\n      moveCard(dragIndex, hoverIndex)\n      // Note: we're mutating the monitor item here!\n      // Generally it's better to avoid mutations,\n      // but it's good here for the sake of performance\n      // to avoid expensive index searches.\n      item.index = hoverIndex\n    },\n  })\n  const [{ isDragging }, drag] = useDrag({\n    type: ItemTypes.CARD,\n    item: () => {\n      return { id, index }\n    },\n    collect: (monitor) => ({\n      isDragging: monitor.isDragging(),\n    }),\n  })\n  const opacity = isDragging ? 0 : 1\n  drag(drop(ref))\n  return (\n    <div ref={ref} class=\"favortiesCard\" data-handler-id={handlerId}>\n      {text}\n    </div>\n  )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}